@using Microsoft.ApplicationInsights
@using Microsoft.AspNetCore.Http
@using Pamaxie.Database.Extensions.Data
@using Pamaxie.Extensions
@using Pamaxie.Website.Authentication
@using Pamaxie.Website.Authentication.Data
@using System.Security.Claims
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IHttpContextAccessor _httpContextAccessor

<MudLayout>
    <MudAppBar Elevation="1" Fixed="true">
        <!--Display Buttons depending on Authorization State of User-->
        <AuthorizeView>
            <Authorized>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
            </Authorized>
        </AuthorizeView>

        <img src="img/Logo-Big.webp" alt="Pamaxie" style="width: 200px; margin-left: 10px"/>

        <MudAppBarSpacer/>
        <MudIconButton Icon="@Icons.Material.Filled.Book" Color="Color.Inherit" Edge="Edge.End" Link="https://wiki.pamaxie.com" Target="_blank"></MudIconButton>
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Edge="Edge.End" Link="https://github.com/deamonicnet/Pamaxie" Target="_blank"/>

        <AuthorizeView>
            <Authorized>
                <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Edge="Edge.End" OnClick="Logout"/>
            </Authorized>
            <NotAuthorized>
                <MudIconButton Icon="@Icons.Material.Filled.Login" Color="Color.Inherit" Edge="Edge.End" OnClick="Login"/>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <AuthorizeView>
        <Authorized>
            <MudDrawer @bind-Open="_drawerOpen" DisableOverlay="true" Elevation="2" Style="background: #313131" Variant="DrawerVariant.Responsive">
                <MudDrawerHeader Style="padding: 0px">
                    <MudCard Style="width: 100%">
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Image="@Profile?.ProfilePictureAddress"/>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.subtitle1" Style="font-size: 14px; line-height: 14px;">
                                    @Profile?.UserName <br/>
                                </MudText>
                                <MudText Typo="Typo.subtitle2" Style="font-size: 10px; line-height: 10px;">
                                    @Profile?.EmailAddress
                                </MudText>
                                <MudText Typo="Typo.subtitle2" Style="font-size: 10px; line-height: 10px;">
                                    @Profile?.GoogleClaimUserId
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                    </MudCard>
                </MudDrawerHeader>
                <MudNavMenu>
                    <MudNavLink Href="/dashboard">Dashboard</MudNavLink>
                    <MudNavLink Href="https://wiki.pamaxie.com" target="_blank">Wiki</MudNavLink>
                    <MudNavLink Href="/about">About</MudNavLink>
                    <MudNavLink Href="/account">Manage Account</MudNavLink>
                </MudNavMenu>
            </MudDrawer>
        </Authorized>
    </AuthorizeView>

    <MudMainContent>
        <MudDialog @bind-IsVisible="ShowCreateAccount">
                <TitleContent>
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.PermIdentity" Class="mr-3"/> Create new Account?
                    </MudText>
                </TitleContent>
                <DialogContent>
                    We don't know your account. Do you want to create one? This means you agree to our 
                    <a href="https://wiki.pamaxie.com" target="_blank">Privacy Policy</a> and 
                    <a href="https://wiki.pamaxie.com" target="_blank">Terms of Service</a> (If you deny we'll have to sign you out)
                </DialogContent>
                <DialogActions>
                    <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="CreateAccount" Class="px-10">Create Account</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Warning" OnClick="Logout" Class="px-10">Log me out</MudButton>
                </DialogActions>
        </MudDialog>
        @ChildContent
    </MudMainContent>
</MudLayout>


@code {
    [Inject]
    private IDialogService DialogService { get; set; }

    //Render Frag for rendering the child content of the Website
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private ProfileData Profile { get; set; }

    private bool UserHasAccount { get; set; } = true;
    private bool ShowCreateAccount { get; set; }

    //Default this to false so we don't push the drawer open all the time...
    bool _drawerOpen = false;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override Task OnInitializedAsync()
    {
        ClaimsPrincipal user = _httpContextAccessor?.HttpContext?.User;
        Profile = user.GetGoogleAuthData(out bool hasAccount)?.GetProfileData();
        UserHasAccount = hasAccount;
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (Profile == null)
            return Task.CompletedTask;
        if (!UserHasAccount || Profile is {Deleted: true })
        {
            ShowCreateAccount = true;
        }
        else
        {
            ShowCreateAccount = false;
        }
        StateHasChanged();
        return base.OnAfterRenderAsync(firstRender);
    }

    private void Login()
    {
        _navigationManager.NavigateTo("/Login", true);
    }

    private void Logout()
    {
        _navigationManager.NavigateTo("/Logout", true);
    }

    private void AccountManagement()
    {
        _navigationManager.NavigateTo("/account", true);
    }

    private void CreateAccount()
    {
        UserExtensions.CreateUser(Profile);
                
        //Forcefully reload after creating the new user to make sure everything is a - ok
        _navigationManager.NavigateTo(_navigationManager.Uri, forceLoad: true);
        UserHasAccount = true;
    }
}