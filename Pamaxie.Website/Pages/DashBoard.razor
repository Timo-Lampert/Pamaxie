@page "/dashboard"
@inherits DashBoardModel
@using Microsoft.AspNetCore.Http
@using Pamaxie.Database.Extensions.Data
@using Pamaxie.Extensions
@using Pamaxie.Website.Authentication
@using Pamaxie.Website.Authentication.Data
@using System.Net
@using System.Net.NetworkInformation
@using System.Security.Claims
@using System.Text
@using System.Text.RegularExpressions
@using Pamaxie.Data
@using InputType = MudBlazor.InputType
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IHttpContextAccessor _httpContextAccessor


<AuthorizeView>
    <Authorized>
        <div class="dash-layout dash-spacing" Style="padding-bottom: 20px" >
            <div>
                <MudText Class="dynamicPadding"Typo="Typo.h4">Welcome back, @Profile.UserName</MudText>

                @if (NewApplication == null)
                {
                    if (Applications == null || !Applications.Any())
                    {
                        <MudText Class="dynamicPadding">Its so empty here! Let's start something new together!</MudText>
                    }

                    <MudButton Class="dynamicPadding" Variant="Variant.Outlined" Style="padding: 15px; margin: 20px" Color="Color.Success" OnClick="@CreateEmptyApplication">Create Application</MudButton>
                }

                @if (NewApplication != null)
                {
                    <MudText Class="dynamicPadding" Typo="Typo.h6">Create new Application</MudText>
                    <div style="text-align: left">
                        <MudForm Class="dynamicPadding mg-10">
                            <MudField Label="Application Id" Variant="Variant.Text">@NewApplication.ApplicationId</MudField>
                            <MudTextField T="string" Label="Application Name" Required="true" RequiredError="Application Name is required!" ValueChanged="s => NewApplication.ApplicationName = s"/>
                            <MudTextField T="string" Label="Application Token" HelperText="Choose an AppToken" @ref="PwField1"
                                          InputType="InputType.Password"
                                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                          RequiredError="AppToken is required!"/>
                            <MudTextField T="string"
                                          Label="AppToken" HelperText="Repeat the Token" InputType="InputType.Password"
                                          Validation="@(new Func<string, string>(PasswordMatch))"/>
                            <MudSpacer></MudSpacer>
                            <MudCheckBox @bind-Checked="@NewApplication.Disabled">Disable Application (This can be changed later)</MudCheckBox> <br/>
                            <MudCheckBox @bind-Checked="@AcceptedTos" Required="true">I've read and agree to the <a href="https://wiki.pamaxie.com/en/tos" target="_blank">Terms of Service</a> </MudCheckBox><br/>
                            <MudCheckBox @bind-Checked="@AcceptedTerms" Required="true">I've read and agree to the <a href="https://wiki.pamaxie.com/en/privacy" target="_blank">Privacy Policy</a></MudCheckBox><br/>
                            <MudButton Class="mg-20" Variant="Variant.Outlined" Style="background: #A6485B" OnClick="@CreateApplication">Create Application</MudButton>
                        </MudForm>
                    </div>
                }

                <!-- Fancy smancy styling path -->
                <svg style="max-height: 140px; width: 100%; height: 20%" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" preserveAspectRatio="none">
                    <path fill="#3f3d56" d="M0,256L80,256C160,256,320,256,480,224C640,192,800,128,960,133.3C1120,139,1280,213,1360,250.7L1440,288L1440,0L1360,0C1280,0,1120,0,960,0C800,0,640,0,480,0C320,0,160,0,80,0L0,0Z"></path>
                    <path fill="#3f3d56" fill-opacity="0.5" d="M0,160L40,133.3C80,107,160,53,240,64C320,75,400,149,480,202.7C560,256,640,288,720,293.3C800,299,880,277,960,256C1040,235,1120,213,1200,208C1280,203,1360,213,1400,218.7L1440,224L1440,0L1400,0C1360,0,1280,0,1200,0C1120,0,1040,0,960,0C880,0,800,0,720,0C640,0,560,0,480,0C400,0,320,0,240,0C160,0,80,0,40,0L0,0Z"></path>
                    <path fill="#212121" fill-opacity="1" d="M0,96L80,122.7C160,149,320,203,480,192C640,181,800,107,960,80C1120,53,1280,75,1360,85.3L1440,96L1440,0L1360,0C1280,0,1120,0,960,0C800,0,640,0,480,0C320,0,160,0,80,0L0,0Z"></path>
                </svg>

                <MudText Class="dynamicPadding" Typo="Typo.h6" Style="margin:  20px;">These are your existing Applications:</MudText>
                @if (Applications != null)
                {
                    <MudExpansionPanels Class="dynamicPadding">
                        @foreach (Application application in Applications)
                        {
                            <MudExpansionPanel Text="@application.ApplicationName">
                                <MudTextField T="string" Label="Application Id" Text="@application.ApplicationId.ToString()" Disabled="true"></MudTextField>
                                <MudTextField T="string" Label="Application Name" Text="@application.ApplicationName" Disabled="true"></MudTextField>
                                <MudTextField T="string" Label="Last Accessed" Text="@application.LastAuth.ToString("f")" Disabled="true"></MudTextField>
                                <MudTextField T="string" Label="Is Disabled?" Text="@application.Disabled.ToString()" Disabled="true"></MudTextField>
                                @if (application.Disabled)
                                {
                                    <MudButton Variant="Variant.Outlined" Style="margin: 20px;" Color="Color.Success" OnClick="@(() => SwitchApplicationState(application))">Enable Application</MudButton>
                                }
                                else
                                {
                                    <MudButton Variant="Variant.Outlined" Style="margin: 20px;" Color="Color.Warning" OnClick="@(() => SwitchApplicationState(application))">Disable Application</MudButton>
                                }

                                <MudButton Variant="Variant.Outlined" Style="margin: 20px;" Color="Color.Error" OnClick="@(() => DeleteApplication(application))">Delete Application</MudButton>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin/>
    </NotAuthorized>
</AuthorizeView>

@code{
    [Inject]
    private IDialogService DialogService { get; set; }

    protected override Task OnInitializedAsync()
    {
        ClaimsPrincipal user = _httpContextAccessor?.HttpContext?.User;
        Profile = user.GetGoogleAuthData(out bool hasAccount)?.GetProfileData();

        //Something weird is going on. Logout the user to make sure we are not de-syncing or anything.
        if (Profile == null)
        {
            _navigationManager.NavigateTo("/Logout", true);
            return Task.CompletedTask;
        }

        //Has no Account has to create one first before accessing this.
        if (!hasAccount)
            return Task.CompletedTask;

        Applications = ApplicationExtensions.GetApplications(Profile.Id);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task DeleteApplication(Application application)
    {
        bool? result = await DialogService.ShowMessageBox(
            $"Do you really wanna delete {application.ApplicationName}?",
            "Deleting your applications can't be undone! It will join the dark side of our data and be gone forever! " +
            "(Like seriously we delete it entirely from all of our services and wipe it from existence, there is nothing we can do once its gone.)",
            yesText: "Jep", cancelText: "Nope");
        if (result is true)
        {
            application.DeleteApplication();
            Applications = ApplicationExtensions.GetApplications(Profile.Id);
            StateHasChanged();
        }
    }


    private async Task SwitchApplicationState(Application application)
    {
        bool? result = await DialogService.ShowMessageBox(
            $"Do you really wanna disable {application.ApplicationName}?",
            "Disabling your application will block anyone from accessing it. You can re-enable it any time however! " +
            "This will just block access to it if you suspect issues with your token and want to validate everything is ok.",
            yesText: "Jep", cancelText: "Nope");
        if (result is true)
        {
            application.SetApplicationStatus(application.Disabled);
            Applications = ApplicationExtensions.GetApplications(Profile.Id);
            StateHasChanged();
        }
    }

}