@using Microsoft.AspNetCore.Http
@using Pamaxie.Blazor.Authentication
@using Pamaxie.Blazor.Authentication.Data
@using Microsoft.ApplicationInsights
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IHttpContextAccessor _httpContextAccessor

<MudLayout>
    <MudAppBar Elevation="1" Dense="true">
        <!--Display Buttons depending on Authorization State of User-->
        <AuthorizeView>
            <Authorized>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
            </Authorized>
        </AuthorizeView>

        <MudBreadcrumbs Items="_items">
            <SeparatorTemplate>
                <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Size="Size.Small"/>
            </SeparatorTemplate>
        </MudBreadcrumbs>

        <AuthorizeView>
            <Authorized>
                <MudAppBarSpacer/>
                <MudIconButton Icon="@Icons.Material.Filled.SupportAgent" Color="Color.Inherit" Edge="Edge.End" Link="https://support.deamonic.net"/>
                <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Edge="Edge.End" OnClick="Logout"/>
            </Authorized>
            <NotAuthorized>
                <MudAppBarSpacer/>
                <MudIconButton Icon="@Icons.Material.Filled.Login" Color="Color.Inherit" Edge="Edge.End" OnClick="Login"/>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>

    <AuthorizeView>
        <Authorized>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="2" Style="background: #313131">
                <MudDrawerHeader Style="padding: 0px">
                    <MudCard Style="width: 100%">
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Image="@Profile?.ProfilePictureAddress"/>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.subtitle1" Style="font-size: 14px; line-height: 14px;">
                                    @Profile?.UserName <br/>
                                </MudText>
                                <MudText Typo="Typo.subtitle2" Style="font-size: 8px; line-height: 9px;">
                                    @Profile?.EmailAddress
                                </MudText>
                                <MudText Typo="Typo.subtitle2" Style="font-size: 6px; line-height: 9px;">
                                    @Profile?.UserId
                                </MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default"/>
                            </CardHeaderActions>
                        </MudCardHeader>
                    </MudCard>
                </MudDrawerHeader>
                <MudNavMenu>

                </MudNavMenu>
            </MudDrawer>
            <MudMainContent>
                @ChildContent
            </MudMainContent>
        </Authorized>
    </AuthorizeView>
</MudLayout>


@code {
    //Render Frag for rendering the child content of the Website
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private ProfileData Profile { get; set; }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>();

    //Default this to false so we don't push the drawer open all the time...
    bool _drawerOpen = false;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override Task OnInitializedAsync()
    {
        var relativePath = _navigationManager.ToBaseRelativePath(_navigationManager.Uri);
        var path = relativePath.Split('/');
        string pathDesignator = string.Empty;
        foreach (var href in path)
        {
            pathDesignator += href;
            
            _items.Add(new BreadcrumbItem(string.IsNullOrEmpty(href) ? href : "Home" , _navigationManager.BaseUri + pathDesignator));
        }

        var user = _httpContextAccessor?.HttpContext?.User;
        Profile = user.GetGoogleAuthData()?.GetProfileData();
        return Task.CompletedTask;
    }

    private void Login()
    {
        _navigationManager.NavigateTo("/Login", true);
    }

    private void Logout()
    {
        _navigationManager.NavigateTo("/Logout", true);
    }

}